
Traffic-Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001230  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b23  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00002dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000612  00000000  00000000  00003571  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  74:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
	
	//setjmp(buf);
	
	
	//timers initialization
	T0_init();
  7c:	0e 94 ae 02 	call	0x55c	; 0x55c <T0_init>
	T1_init();
  80:	0e 94 bc 02 	call	0x578	; 0x578 <T1_init>
	
	
	//LEDs initializations//
	
	//car LEDs
	led_init(PORT_A,0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 50 01 	call	0x2a0	; 0x2a0 <led_init>
	led_init(PORT_A,1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 50 01 	call	0x2a0	; 0x2a0 <led_init>
	led_init(PORT_A,2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 50 01 	call	0x2a0	; 0x2a0 <led_init>
	
	
	//pedestrians LEDs
	led_init(PORT_B,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <led_init>
	led_init(PORT_B,1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <led_init>
	led_init(PORT_B,2);		
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <led_init>
	
	
	//button initializations
	Button_init(PORT_D,2);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	0e 94 4c 01 	call	0x298	; 0x298 <Button_init>
	
	//INT0 Initialization
	INT0_init();
  bc:	0e 94 9d 02 	call	0x53a	; 0x53a <INT0_init>
  c0:	08 95       	ret

000000c2 <App_start>:
	//	setjmp(buf);
		
		
		
		
		if(Current_State == Red)
  c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Current_State>
  c6:	81 11       	cpse	r24, r1
  c8:	14 c0       	rjmp	.+40     	; 0xf2 <App_start+0x30>
		{
			led_on(PORT_A,Red);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led_on>
			T1_start();
  d2:	0e 94 bf 02 	call	0x57e	; 0x57e <T1_start>
			T1_wait();
  d6:	0e 94 cc 02 	call	0x598	; 0x598 <T1_wait>
			T1_stop();
  da:	0e 94 c7 02 	call	0x58e	; 0x58e <T1_stop>
			led_off(PORT_A,Red);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
			Prev_State = Red;
  e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			Current_State=Yellow;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Current_State>
  f0:	e8 cf       	rjmp	.-48     	; 0xc2 <App_start>
			
		}
	 	else if(Current_State==Yellow)
  f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Current_State>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	19 f5       	brne	.+70     	; 0x140 <App_start+0x7e>
  fa:	0c c0       	rjmp	.+24     	; 0x114 <App_start+0x52>
		{  
			//T1_start();
			while(i<20)
			{
				led_blink(PORT_A,Yellow);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 5f 01 	call	0x2be	; 0x2be <led_blink>
				i++;
 104:	cf 5f       	subi	r28, 0xFF	; 255
				
			if(flag==1){
 106:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	21 f4       	brne	.+8      	; 0x116 <App_start+0x54>
					flag=0;
 10e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag>
				break;}		
 112:	03 c0       	rjmp	.+6      	; 0x11a <App_start+0x58>
 114:	c0 e0       	ldi	r28, 0x00	; 0
			
		}
	 	else if(Current_State==Yellow)
		{  
			//T1_start();
			while(i<20)
 116:	c4 31       	cpi	r28, 0x14	; 20
 118:	88 f3       	brcs	.-30     	; 0xfc <App_start+0x3a>
				
			if(flag==1){
					flag=0;
				break;}		
			}
			led_off(PORT_A,Yellow);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
			i=0;
			//T1_stop();
			if (Prev_State==Red)
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	81 11       	cpse	r24, r1
 128:	04 c0       	rjmp	.+8      	; 0x132 <App_start+0x70>
			{
				Current_State=Green;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Current_State>
 130:	c8 cf       	rjmp	.-112    	; 0xc2 <App_start>
			}
			else if (Prev_State==Green)
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	21 f6       	brne	.-120    	; 0xc2 <App_start>
			{
				Current_State= Red;
 13a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Current_State>
 13e:	c1 cf       	rjmp	.-126    	; 0xc2 <App_start>
			}
			
		}
		else if(Current_State==Green)
 140:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Current_State>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	09 f0       	breq	.+2      	; 0x14a <App_start+0x88>
 148:	bc cf       	rjmp	.-136    	; 0xc2 <App_start>
		{
			led_on(PORT_A,Green);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led_on>
			T1_start();
 152:	0e 94 bf 02 	call	0x57e	; 0x57e <T1_start>
			T1_wait();
 156:	0e 94 cc 02 	call	0x598	; 0x598 <T1_wait>
			T1_stop();
 15a:	0e 94 c7 02 	call	0x58e	; 0x58e <T1_stop>
			led_off(PORT_A,Green);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
			Prev_State=Green;
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			Current_State=Yellow;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Current_State>
 172:	a7 cf       	rjmp	.-178    	; 0xc2 <App_start>

00000174 <__vector_1>:



void __vector_1 (void)    __attribute__((signal));
void __vector_1 (void)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	cf 93       	push	r28
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	INT0_Disable();
 198:	0e 94 aa 02 	call	0x554	; 0x554 <INT0_Disable>
	if (Current_State==Red)
 19c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Current_State>
 1a0:	81 11       	cpse	r24, r1
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <__vector_1+0x4a>
	{
		led_on(PORT_B,Green);
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led_on>
		T1_start();
 1ac:	0e 94 bf 02 	call	0x57e	; 0x57e <T1_start>
		T1_wait();
 1b0:	0e 94 cc 02 	call	0x598	; 0x598 <T1_wait>
		led_off(PORT_B,Green);	
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
 1bc:	59 c0       	rjmp	.+178    	; 0x270 <__vector_1+0xfc>
	}
	else if(Current_State==Green || Current_State==Yellow)
 1be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Current_State>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <__vector_1+0x5c>
 1c6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Current_State>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <__vector_1+0x5c>
 1ce:	50 c0       	rjmp	.+160    	; 0x270 <__vector_1+0xfc>
	{
		uint8_t z=0;
		
		
		led_off(PORT_A,Yellow);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		led_off(PORT_A,Green);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		
		/////////////////////////////////////////////////////////////////////////////////
		
		
		
		led_on(PORT_B,Red);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led_on>
		
		for(uint8_t x=0;x<2;x++){
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <__vector_1+0x8c>
		T0_Start(250,5);
 1ec:	65 e0       	ldi	r22, 0x05	; 5
 1ee:	8a ef       	ldi	r24, 0xFA	; 250
 1f0:	0e 94 b0 02 	call	0x560	; 0x560 <T0_Start>
		while(READ_BIT(TIFR,T0OVF)==0);
 1f4:	08 b6       	in	r0, 0x38	; 56
 1f6:	00 fe       	sbrs	r0, 0
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <__vector_1+0x80>
		T0_Stop();
 1fa:	0e 94 b7 02 	call	0x56e	; 0x56e <T0_Stop>
		
		
		
		led_on(PORT_B,Red);
		
		for(uint8_t x=0;x<2;x++){
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	c2 30       	cpi	r28, 0x02	; 2
 202:	a0 f3       	brcs	.-24     	; 0x1ec <__vector_1+0x78>
		T0_Start(250,5);
		while(READ_BIT(TIFR,T0OVF)==0);
		T0_Stop();
		}
		led_off(PORT_B,Red);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	82 e4       	ldi	r24, 0x42	; 66
 208:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		T1_wait();
		led_off(PORT_B,Green);	
	}
	else if(Current_State==Green || Current_State==Yellow)
	{
		uint8_t z=0;
 20c:	c0 e0       	ldi	r28, 0x00	; 0
		T0_Start(250,5);
		while(READ_BIT(TIFR,T0OVF)==0);
		T0_Stop();
		}
		led_off(PORT_B,Red);
		while(z<10)
 20e:	09 c0       	rjmp	.+18     	; 0x222 <__vector_1+0xae>
		{
			led_blink(PORT_A,Yellow);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	0e 94 5f 01 	call	0x2be	; 0x2be <led_blink>
			led_blink(PORT_B,Yellow);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	82 e4       	ldi	r24, 0x42	; 66
 21c:	0e 94 5f 01 	call	0x2be	; 0x2be <led_blink>
			z++;
 220:	cf 5f       	subi	r28, 0xFF	; 255
		T0_Start(250,5);
		while(READ_BIT(TIFR,T0OVF)==0);
		T0_Stop();
		}
		led_off(PORT_B,Red);
		while(z<10)
 222:	ca 30       	cpi	r28, 0x0A	; 10
 224:	a8 f3       	brcs	.-22     	; 0x210 <__vector_1+0x9c>
		{
			led_blink(PORT_A,Yellow);
			led_blink(PORT_B,Yellow);
			z++;
		}
		T0_Start(250,5);
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	8a ef       	ldi	r24, 0xFA	; 250
 22a:	0e 94 b0 02 	call	0x560	; 0x560 <T0_Start>
		led_off(PORT_A,Yellow);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		led_off(PORT_B,Yellow);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	82 e4       	ldi	r24, 0x42	; 66
 23a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		z=0;
		//////////////////////////////////////////////////////////////////////////
		led_on(PORT_B,Green);
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led_on>
		led_on(PORT_A,Red);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	81 e4       	ldi	r24, 0x41	; 65
 24a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led_on>
		T1_start();
 24e:	0e 94 bf 02 	call	0x57e	; 0x57e <T1_start>
		T1_wait();
 252:	0e 94 cc 02 	call	0x598	; 0x598 <T1_wait>
		led_off(PORT_B,Green);
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		led_off(PORT_A,Red);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 58 01 	call	0x2b0	; 0x2b0 <led_off>
		Prev_State=Red;
 266:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		Current_State=Yellow;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Current_State>
	
		
	}
	INT0_Enable();
 270:	0e 94 a6 02 	call	0x54c	; 0x54c <INT0_Enable>
	//flag=1;
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	cf 91       	pop	r28
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <Button_init>:

#include "button.h"

void Button_init(uint8_t portNumber,uint8_t pinNumber)
{
	DIO_init(portNumber,pinNumber,IN);
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_init>
 29e:	08 95       	ret

000002a0 <led_init>:

#include "led.h"

void led_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_init>
 2a6:	08 95       	ret

000002a8 <led_on>:
}
void led_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HIGH);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_write>
 2ae:	08 95       	ret

000002b0 <led_off>:
}
void led_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LOW);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_write>
 2b6:	08 95       	ret

000002b8 <led_toggle>:
}
void led_toggle(uint8_t ledPort,uint8_t ledPin)
{
	DIO_toggle(ledPort,ledPin);
 2b8:	0e 94 66 02 	call	0x4cc	; 0x4cc <DIO_toggle>
 2bc:	08 95       	ret

000002be <led_blink>:
}
void led_blink(uint8_t ledPort,uint8_t ledPin)
{
	led_toggle(ledPort,ledPin);
 2be:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <led_toggle>
	T0_Start(250,5);
 2c2:	65 e0       	ldi	r22, 0x05	; 5
 2c4:	8a ef       	ldi	r24, 0xFA	; 250
 2c6:	0e 94 b0 02 	call	0x560	; 0x560 <T0_Start>
	while(READ_BIT(TIFR,T0OVF)==0);
 2ca:	08 b6       	in	r0, 0x38	; 56
 2cc:	00 fe       	sbrs	r0, 0
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <led_blink+0xc>
	T0_Stop();
 2d0:	0e 94 b7 02 	call	0x56e	; 0x56e <T0_Stop>
 2d4:	08 95       	ret

000002d6 <main>:

int main(void)
{
	
	
	App_init();
 2d6:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	
	App_start();
 2da:	0e 94 61 00 	call	0xc2	; 0xc2 <App_start>
	
}
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret

000002e4 <DIO_init>:
//functions definition


void DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction)
{
	switch (portNumber)
 2e4:	82 34       	cpi	r24, 0x42	; 66
 2e6:	31 f1       	breq	.+76     	; 0x334 <DIO_init+0x50>
 2e8:	18 f4       	brcc	.+6      	; 0x2f0 <DIO_init+0xc>
 2ea:	81 34       	cpi	r24, 0x41	; 65
 2ec:	39 f0       	breq	.+14     	; 0x2fc <DIO_init+0x18>
 2ee:	08 95       	ret
 2f0:	83 34       	cpi	r24, 0x43	; 67
 2f2:	e1 f1       	breq	.+120    	; 0x36c <DIO_init+0x88>
 2f4:	84 34       	cpi	r24, 0x44	; 68
 2f6:	09 f4       	brne	.+2      	; 0x2fa <DIO_init+0x16>
 2f8:	54 c0       	rjmp	.+168    	; 0x3a2 <DIO_init+0xbe>
 2fa:	08 95       	ret
	{
		//PORTA
		case PORT_A:
		if (direction==IN)
 2fc:	41 11       	cpse	r20, r1
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <DIO_init+0x34>
		{
			DDRA&=(~(1<<pinNumber));
 300:	2a b3       	in	r18, 0x1a	; 26
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_init+0x28>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_init+0x24>
 310:	80 95       	com	r24
 312:	82 23       	and	r24, r18
 314:	8a bb       	out	0x1a, r24	; 26
 316:	08 95       	ret
		}
		
		else if(direction==OUT)
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <DIO_init+0x3a>
 31c:	5c c0       	rjmp	.+184    	; 0x3d6 <DIO_init+0xf2>
		{
			DDRA |= (1<<pinNumber);
 31e:	2a b3       	in	r18, 0x1a	; 26
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_init+0x46>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_init+0x42>
 32e:	82 2b       	or	r24, r18
 330:	8a bb       	out	0x1a, r24	; 26
 332:	08 95       	ret
		}
		break;
		
		//PORTB
		case PORT_B:
		if (direction==IN)
 334:	41 11       	cpse	r20, r1
 336:	0c c0       	rjmp	.+24     	; 0x350 <DIO_init+0x6c>
		{
			DDRB &=(~(1<<pinNumber));
 338:	27 b3       	in	r18, 0x17	; 23
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_init+0x60>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_init+0x5c>
 348:	80 95       	com	r24
 34a:	82 23       	and	r24, r18
 34c:	87 bb       	out	0x17, r24	; 23
 34e:	08 95       	ret
		}
		
		else if(direction==OUT)
 350:	41 30       	cpi	r20, 0x01	; 1
 352:	09 f0       	breq	.+2      	; 0x356 <DIO_init+0x72>
 354:	40 c0       	rjmp	.+128    	; 0x3d6 <DIO_init+0xf2>
		{
			DDRB |= (1<<pinNumber);
 356:	27 b3       	in	r18, 0x17	; 23
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_init+0x7e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_init+0x7a>
 366:	82 2b       	or	r24, r18
 368:	87 bb       	out	0x17, r24	; 23
 36a:	08 95       	ret
		}
		break;
		//PORTC
		
		case PORT_C:
		if (direction==IN)
 36c:	41 11       	cpse	r20, r1
 36e:	0c c0       	rjmp	.+24     	; 0x388 <DIO_init+0xa4>
		{
			DDRC&=(~(1<<pinNumber));
 370:	24 b3       	in	r18, 0x14	; 20
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_init+0x98>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_init+0x94>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	84 bb       	out	0x14, r24	; 20
 386:	08 95       	ret
			
		}
		
		else if(direction==OUT)
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	29 f5       	brne	.+74     	; 0x3d6 <DIO_init+0xf2>
		{
			DDRC |= (1<<pinNumber);
 38c:	24 b3       	in	r18, 0x14	; 20
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_init+0xb4>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_init+0xb0>
 39c:	82 2b       	or	r24, r18
 39e:	84 bb       	out	0x14, r24	; 20
 3a0:	08 95       	ret
		
		//PORTD
		
		
		case PORT_D:
		if (direction==IN)
 3a2:	41 11       	cpse	r20, r1
 3a4:	0c c0       	rjmp	.+24     	; 0x3be <DIO_init+0xda>
		{
			DDRD &=(~(1<<pinNumber));
 3a6:	21 b3       	in	r18, 0x11	; 17
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_init+0xce>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_init+0xca>
 3b6:	80 95       	com	r24
 3b8:	82 23       	and	r24, r18
 3ba:	81 bb       	out	0x11, r24	; 17
 3bc:	08 95       	ret
		}
		
		else if(direction==OUT)
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	51 f4       	brne	.+20     	; 0x3d6 <DIO_init+0xf2>
		{
			DDRD |= (1<<pinNumber);
 3c2:	21 b3       	in	r18, 0x11	; 17
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_init+0xea>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_init+0xe6>
 3d2:	82 2b       	or	r24, r18
 3d4:	81 bb       	out	0x11, r24	; 17
 3d6:	08 95       	ret

000003d8 <DIO_write>:
		
	}
}
void DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value) // write DIO
{
	switch (portNumber)
 3d8:	82 34       	cpi	r24, 0x42	; 66
 3da:	31 f1       	breq	.+76     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3dc:	18 f4       	brcc	.+6      	; 0x3e4 <DIO_write+0xc>
 3de:	81 34       	cpi	r24, 0x41	; 65
 3e0:	39 f0       	breq	.+14     	; 0x3f0 <DIO_write+0x18>
 3e2:	08 95       	ret
 3e4:	83 34       	cpi	r24, 0x43	; 67
 3e6:	e1 f1       	breq	.+120    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 3e8:	84 34       	cpi	r24, 0x44	; 68
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_write+0x16>
 3ec:	54 c0       	rjmp	.+168    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 3ee:	08 95       	ret
	{
		//PORTA
		case PORT_A:
		if (value==LOW)
 3f0:	41 11       	cpse	r20, r1
 3f2:	0c c0       	rjmp	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			PORTA &=(~(1<<pinNumber));
 3f4:	2b b3       	in	r18, 0x1b	; 27
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_write+0x24>
 404:	80 95       	com	r24
 406:	82 23       	and	r24, r18
 408:	8b bb       	out	0x1b, r24	; 27
 40a:	08 95       	ret
		}
		
		else if(value==HIGH)
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	5c c0       	rjmp	.+184    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		{
			PORTA |= (1<<pinNumber);
 412:	2b b3       	in	r18, 0x1b	; 27
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	82 2b       	or	r24, r18
 424:	8b bb       	out	0x1b, r24	; 27
 426:	08 95       	ret
		}
		break;
		
		//PORTB
		case PORT_B:
		if (value==LOW)
 428:	41 11       	cpse	r20, r1
 42a:	0c c0       	rjmp	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
			PORTB &=(~(1<<pinNumber));
 42c:	28 b3       	in	r18, 0x18	; 24
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	80 95       	com	r24
 43e:	82 23       	and	r24, r18
 440:	88 bb       	out	0x18, r24	; 24
 442:	08 95       	ret
		}
		
		else if(value==HIGH)
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	09 f0       	breq	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	40 c0       	rjmp	.+128    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		{
			PORTB |= (1<<pinNumber);
 44a:	28 b3       	in	r18, 0x18	; 24
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	82 2b       	or	r24, r18
 45c:	88 bb       	out	0x18, r24	; 24
 45e:	08 95       	ret
		}
		break;
		//PORTC
		
		case PORT_C:
		if (value==LOW)
 460:	41 11       	cpse	r20, r1
 462:	0c c0       	rjmp	.+24     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		{
			PORTC &=(~(1<<pinNumber));
 464:	25 b3       	in	r18, 0x15	; 21
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	80 95       	com	r24
 476:	82 23       	and	r24, r18
 478:	85 bb       	out	0x15, r24	; 21
 47a:	08 95       	ret
			
		}
		
		else if(value==HIGH)
 47c:	41 30       	cpi	r20, 0x01	; 1
 47e:	29 f5       	brne	.+74     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		{
			PORTC |= (1<<pinNumber);
 480:	25 b3       	in	r18, 0x15	; 21
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	82 2b       	or	r24, r18
 492:	85 bb       	out	0x15, r24	; 21
 494:	08 95       	ret
		
		//PORTD
		
		
		case PORT_D:
		if (value==LOW)
 496:	41 11       	cpse	r20, r1
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		{
			PORTD &=(~(1<<pinNumber));
 49a:	22 b3       	in	r18, 0x12	; 18
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	82 bb       	out	0x12, r24	; 18
 4b0:	08 95       	ret
		}
		
		else if(value==HIGH)
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	51 f4       	brne	.+20     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		{
			PORTD |= (1<<pinNumber);
 4b6:	22 b3       	in	r18, 0x12	; 18
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	82 2b       	or	r24, r18
 4c8:	82 bb       	out	0x12, r24	; 18
 4ca:	08 95       	ret

000004cc <DIO_toggle>:
		
	}
}
void DIO_toggle(uint8_t portNumber,uint8_t pinNumber) //toggle DIO
{
	switch (portNumber)
 4cc:	82 34       	cpi	r24, 0x42	; 66
 4ce:	a1 f0       	breq	.+40     	; 0x4f8 <DIO_toggle+0x2c>
 4d0:	18 f4       	brcc	.+6      	; 0x4d8 <DIO_toggle+0xc>
 4d2:	81 34       	cpi	r24, 0x41	; 65
 4d4:	31 f0       	breq	.+12     	; 0x4e2 <DIO_toggle+0x16>
 4d6:	08 95       	ret
 4d8:	83 34       	cpi	r24, 0x43	; 67
 4da:	c9 f0       	breq	.+50     	; 0x50e <DIO_toggle+0x42>
 4dc:	84 34       	cpi	r24, 0x44	; 68
 4de:	11 f1       	breq	.+68     	; 0x524 <DIO_toggle+0x58>
 4e0:	08 95       	ret
	{
	case PORT_A:
		TGL_BIT(PORTA,pinNumber);
 4e2:	2b b3       	in	r18, 0x1b	; 27
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_toggle+0x22>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_toggle+0x1e>
 4f2:	82 27       	eor	r24, r18
 4f4:	8b bb       	out	0x1b, r24	; 27
		break;
 4f6:	08 95       	ret
		
	case PORT_B:
		TGL_BIT(PORTB,pinNumber);
 4f8:	28 b3       	in	r18, 0x18	; 24
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_toggle+0x38>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_toggle+0x34>
 508:	82 27       	eor	r24, r18
 50a:	88 bb       	out	0x18, r24	; 24
		break;
 50c:	08 95       	ret
		
	case PORT_C:
		TGL_BIT(PORTC,pinNumber);
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_toggle+0x4e>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_toggle+0x4a>
 51e:	82 27       	eor	r24, r18
 520:	85 bb       	out	0x15, r24	; 21
		break;
 522:	08 95       	ret
		
			
	case PORT_D:
		TGL_BIT(PORTD,pinNumber);
 524:	22 b3       	in	r18, 0x12	; 18
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_toggle+0x64>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_toggle+0x60>
 534:	82 27       	eor	r24, r18
 536:	82 bb       	out	0x12, r24	; 18
 538:	08 95       	ret

0000053a <INT0_init>:


void INT0_init(void)
{
	
	SET_BIT(SREG,GIE);//General INT Enable
 53a:	8f b7       	in	r24, 0x3f	; 63
 53c:	80 68       	ori	r24, 0x80	; 128
 53e:	8f bf       	out	0x3f, r24	; 63
	MCUCR=0x02;//for failing edge sensing
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,6);//Enable INT0
 544:	8b b7       	in	r24, 0x3b	; 59
 546:	80 64       	ori	r24, 0x40	; 64
 548:	8b bf       	out	0x3b, r24	; 59
 54a:	08 95       	ret

0000054c <INT0_Enable>:
}
void INT0_Enable(void)
{
	SET_BIT(GICR,6);
 54c:	8b b7       	in	r24, 0x3b	; 59
 54e:	80 64       	ori	r24, 0x40	; 64
 550:	8b bf       	out	0x3b, r24	; 59
 552:	08 95       	ret

00000554 <INT0_Disable>:
}
void INT0_Disable(void)
{
	CLR_BIT(GICR,6);
 554:	8b b7       	in	r24, 0x3b	; 59
 556:	8f 7b       	andi	r24, 0xBF	; 191
 558:	8b bf       	out	0x3b, r24	; 59
 55a:	08 95       	ret

0000055c <T0_init>:
#include "T0.h"


void T0_init(void)
{
	TCCR0 =0x00;
 55c:	13 be       	out	0x33, r1	; 51
 55e:	08 95       	ret

00000560 <T0_Start>:
}
void T0_Start(uint8_t initial_value,uint8_t prescale)
{
	
	TCNT0=265-initial_value;
 560:	99 e0       	ldi	r25, 0x09	; 9
 562:	98 1b       	sub	r25, r24
 564:	92 bf       	out	0x32, r25	; 50
	TCCR0 |=prescale;
 566:	83 b7       	in	r24, 0x33	; 51
 568:	68 2b       	or	r22, r24
 56a:	63 bf       	out	0x33, r22	; 51
 56c:	08 95       	ret

0000056e <T0_Stop>:
}
void T0_Stop(void)
{
	TCCR0=0x00;
 56e:	13 be       	out	0x33, r1	; 51
	SET_BIT(TIFR,T0OVF);
 570:	88 b7       	in	r24, 0x38	; 56
 572:	81 60       	ori	r24, 0x01	; 1
 574:	88 bf       	out	0x38, r24	; 56
 576:	08 95       	ret

00000578 <T1_init>:
#include "T1.h"


void T1_init(void)
{
	TCCR1A=0x00;
 578:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x00;
 57a:	1e bc       	out	0x2e, r1	; 46
 57c:	08 95       	ret

0000057e <T1_start>:



void T1_start(void)
{
	TCNT1=65536-4883;// Total ticks=65536....required ticks = 4883
 57e:	8d ee       	ldi	r24, 0xED	; 237
 580:	9c ee       	ldi	r25, 0xEC	; 236
 582:	9d bd       	out	0x2d, r25	; 45
 584:	8c bd       	out	0x2c, r24	; 44
	TCCR1B |=0x05;	//	clk/1024......OVT=67.1s
 586:	8e b5       	in	r24, 0x2e	; 46
 588:	85 60       	ori	r24, 0x05	; 5
 58a:	8e bd       	out	0x2e, r24	; 46
 58c:	08 95       	ret

0000058e <T1_stop>:
}
void T1_stop(void)
{
	TCCR1B=0x00;
 58e:	1e bc       	out	0x2e, r1	; 46
	SET_BIT(TIFR,T1OVF);
 590:	88 b7       	in	r24, 0x38	; 56
 592:	84 60       	ori	r24, 0x04	; 4
 594:	88 bf       	out	0x38, r24	; 56
 596:	08 95       	ret

00000598 <T1_wait>:
}

void T1_wait(void)
{
	while(READ_BIT(TIFR,T1OVF)==0);
 598:	08 b6       	in	r0, 0x38	; 56
 59a:	02 fe       	sbrs	r0, 2
 59c:	fd cf       	rjmp	.-6      	; 0x598 <T1_wait>
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
